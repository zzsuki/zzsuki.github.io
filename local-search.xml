<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/05/IPSecVPN-Deploy/"/>
    <url>/2021/07/05/IPSecVPN-Deploy/</url>
    
    <content type="html"><![CDATA[<h1 id="IPSecVPN服务搭建"><a href="#IPSecVPN服务搭建" class="headerlink" title="IPSecVPN服务搭建"></a>IPSecVPN服务搭建</h1><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="使用docker部署"><a href="#使用docker部署" class="headerlink" title="使用docker部署"></a>使用docker部署</h3><ol><li><p>部署docker</p></li><li><p>拉取自动化部署镜像：docker pull hwdsl2/ipsec-vpn-server</p></li><li><p>设置环境变量文件<code>.vpn.env</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 鉴别信息相关</span><br>VPN_IPSEC_PSK=your_ipsec_pre_shared_key<br>VPN_USER=your_vpn_username<br>VPN_PASSWORD=your_vpn_password<br><span class="hljs-meta">#</span><span class="bash"> 配置其它账号(存在多终端时建议分开配置账号)</span><br>VPN_ADDL_USERS=additional_username_1 additional_username_2<br>VPN_ADDL_PASSWORDS=additional_password_1 additional_password_2<br><span class="hljs-meta">#</span><span class="bash"> VPN服务器使用的nameserver，默认使用google的dns服务即8.8.8.8</span><br>VPN_DNS_SRV1=1.1.1.1<br>VPN_DNS_SRV2=1.0.0.1<br><span class="hljs-meta">#</span><span class="bash"> VPN服务器的FQDN值，会影响到IKEv2模式生成的证书(hostname -f 可查看FQDN)</span><br>VPN_DNS_NAME=vpn.example.com<br><span class="hljs-meta">#</span><span class="bash"> 指定client名称，类似一个tag一样，客户端配置以name为单位进行管理，默认vpnclient</span><br>VPN_CLIENT_NAME=your_client_name<br></code></pre></td></tr></table></figure></li><li><p>运行IPSec VPN服务器： <code>docker run --name ipsec-vpn-server --env-file .vpn.env --restart always -v ikev2-vpn-data:/etc/ipsec.d -p 500:500/udp -p 4500:4500/udp -d --privileged hwdsl2/ipsec-vpn-server</code></p><ul><li><p><code>-v</code>参数含义：自动创建volume挂载文件，使用-v时容器会自动启动IKEv2</p></li><li><p>支持的协议： IPsec/L2TP、IKEv2、IPsec/XAuth (“Cisco IPsec”)</p></li><li><p>关于privileged：如果考虑到安全，不希望给容器提供整体的超级权限；可以通过单独给容器设置必要的权限来控制(但可能导致一些未知的错误)，将<code>--privileged</code>改为：</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">--cap-add=NET_ADMIN \<br>--device=/dev/ppp \<br>--sysctl net.ipv4.ip_forward=1 \<br>--sysctl net.ipv4.conf.all.accept_redirects=0 \<br>--sysctl net.ipv4.conf.all.send_redirects=0 \<br>--sysctl net.ipv4.conf.all.rp_filter=0 \<br>--sysctl net.ipv4.conf.default.accept_redirects=0 \<br>--sysctl net.ipv4.conf.default.send_redirects=0 \<br>--sysctl net.ipv4.conf.default.rp_filter=0 \<br>--sysctl net.ipv4.conf.eth0.send_redirects=0 \<br>--sysctl net.ipv4.conf.eth0.rp_filter=0<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="服务配置常用"><a href="#服务配置常用" class="headerlink" title="服务配置常用"></a>服务配置常用</h3><ol><li>获取VPN登录信息： <code>docker logs ipsec-vpn-server</code></li><li>IKEv2配置：<ul><li>添加客户端：<code>docker exec -it ipsec-vpn-server ikev2.sh --addclient [client name]</code></li><li>导出已有客户端的配置：<code>docker exec -it ipsec-vpn-server ikev2.sh --exportclient [client name]</code></li><li>列出已有客户端的名称：<code>docker exec -it ipsec-vpn-server ikev2.sh --listclients</code>\</li><li>显示使用信息：<code>docker exec -it ipsec-vpn-server ikev2.sh -h</code></li><li>复制配置文件到宿主机（内容可用于客户端配置）：<code>docker cp ipsec-vpn-server:/etc/ipsec.d/vpnclient.p12 ./</code></li></ul></li></ol><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="IPsec-L2TP-VPN"><a href="#IPsec-L2TP-VPN" class="headerlink" title="IPsec/L2TP VPN"></a>IPsec/L2TP VPN</h3><h4 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h4><ul><li><p>图形界面操作：</p><ol><li>右键单击系统托盘中的无线/网络图标。</li><li>选择<strong>打开网络和共享中心</strong>。或者，如果你使用 Windows 10 版本 1709 或以上，选择<strong>打开”网络和Internet”设置</strong>，然后在打开的页面中单击<strong>网络和共享中心</strong>。</li><li>单击<strong>设置新的连接或网络</strong>。</li><li>选择<strong>连接到工作区</strong>，然后单击<strong>下一步</strong>。</li><li>单击**使用我的Internet连接 (VPN)**。</li><li>在<strong>Internet地址</strong>字段中输入<code>你的VPN 服务器 IP</code>。</li><li>在<strong>目标名称</strong>字段中输入任意内容。单击<strong>创建</strong>。</li><li>返回<strong>网络和共享中心</strong>。单击左侧的<strong>更改适配器设置</strong>。</li><li>右键单击新创建的 VPN 连接，并选择<strong>属性</strong>。</li><li>单击 <strong>安全</strong> 选项卡，从 <strong>VPN 类型</strong> 下拉菜单中选择 “使用 IPsec 的第 2 层隧道协议 (L2TP/IPSec)”。</li><li>单击 <strong>允许使用这些协议</strong>。选中 “质询握手身份验证协议 (CHAP)” 和 “Microsoft CHAP 版本 2 (MS-CHAP v2)” 复选框。</li><li>单击 <strong>高级设置</strong> 按钮。</li><li>单击 <strong>使用预共享密钥作身份验证</strong> 并在 <strong>密钥</strong> 字段中输入<code>你的 VPN IPsec PSK</code>。</li><li>单击 <strong>确定</strong> 关闭 <strong>高级设置</strong>。</li><li>单击 <strong>确定</strong> 保存 VPN 连接的详细信息。</li></ol></li><li><p>命令行执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 不保存命令行历史记录<br><span class="hljs-built_in">Set</span>-PSReadlineOption –HistorySaveStyle SaveNothing<br># 创建 VPN 连接<br>Add-VpnConnection -Name &#x27;My IPsec VPN&#x27; -ServerAddress &#x27;你的 VPN 服务器 IP&#x27; -L2tpPsk &#x27;你的 VPN IPsec PSK&#x27; -TunnelType L2tp -EncryptionLevel Required -AuthenticationMethod Chap,MSChapv2 -Force -RememberCredential -PassThr<br></code></pre></td></tr></table></figure></li><li><p><strong>注意</strong></p><ul><li>首次使用IPsec/L2TP 模式连接到 VPN 时，需要修改注册表以解决 VPN 服务器 和/或 客户端与 NAT （比如家用路由器）的兼容问题：<code>REG ADD HKLM\SYSTEM\CurrentControlSet\Services\PolicyAgent /v AssumeUDPEncapsulationContextOnSendRule /t REG_DWORD /d 0x2 /f</code></li><li>某些个别的 Windows 系统配置禁用了 IPsec 加密，此时也会导致连接失败。要重新启用它，可以运行以下命令并重启：<code>REG ADD HKLM\SYSTEM\CurrentControlSet\Services\RasMan\Parameters /v ProhibitIpSec /t REG_DWORD /d 0x0 /f</code></li></ul></li></ul><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><ol><li>进入<strong>设置</strong> -&gt; <strong>通用</strong> -&gt; <strong>VPN</strong>。</li><li>单击 <strong>添加VPN配置</strong>…。</li><li>单击 <strong>类型</strong> 。选择 <strong>L2TP</strong> 并返回。</li><li>在 <strong>描述</strong> 字段中输入任意内容。</li><li>在 <strong>服务器</strong> 字段中输入<code>你的 VPN 服务器 IP</code>。</li><li>在 <strong>帐户</strong> 字段中输入<code>你的 VPN 用户名</code>。</li><li>在 <strong>密码</strong> 字段中输入<code>你的 VPN 密码</code>。</li><li>在 <strong>密钥</strong> 字段中输入<code>你的 VPN IPsec PSK</code>。</li><li>启用 <strong>发送所有流量</strong> 选项。</li><li>单击右上角的 <strong>完成</strong>。</li><li>启用 VPN 连接。</li></ol><h4 id="OS-X"><a href="#OS-X" class="headerlink" title="OS X"></a>OS X</h4><p>基础配置类似，在基础配置完成后需要单独注意的包括：</p><ul><li>单击 <strong>高级</strong> 按钮，并选中 <strong>通过VPN连接发送所有通信</strong> 复选框</li><li>单击 <strong>TCP/IP</strong> 选项卡，并在 <strong>配置IPv6</strong> 部分中选择 <strong>仅本地链接</strong></li></ul><h3 id="IKEv2-VPN（推荐方式）"><a href="#IKEv2-VPN（推荐方式）" class="headerlink" title="IKEv2 VPN（推荐方式）"></a>IKEv2 VPN（推荐方式）</h3><h4 id="Win10-GUI配置不推荐，-不如命令行快捷"><a href="#Win10-GUI配置不推荐，-不如命令行快捷" class="headerlink" title="Win10(GUI配置不推荐， 不如命令行快捷)"></a>Win10(GUI配置不推荐， 不如命令行快捷)</h4><ol><li><p>导入证书文件：<code>certutil -f -importpfx &quot;.p12文件的位置和名称&quot; NoExport</code>；导入过程中会要求输入证书密码，密码可通过上边的配置导出进行查看；这个步骤不论手工还是CLI实现，最终只要保证在导入证书后，将客户端证书放在 “个人 -&gt; 证书” 目录中，并且将 CA 证书放在 “受信任的根证书颁发机构 -&gt; 证书” 目录中</p></li><li><p>创建IKEv2 VPN连接,需要注意服务器地址必须和服务器端配置的一致，否则无法正常完成证书认证：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 创建 VPN 连接（将服务器地址换成你自己的值）<br>powershell -command &quot;Add-VpnConnection -ServerAddress &#x27;你的 VPN 服务器 IP（或者域名）&#x27; -Name &#x27;My IKEv2 VPN&#x27; -TunnelType IKEv2 -AuthenticationMethod MachineCertificate -EncryptionLevel Required -PassThru&quot;<br># 设置 IPsec 参数<br>powershell -command &quot;<span class="hljs-built_in">Set</span>-VpnConnectionIPsecConfiguration -ConnectionName &#x27;My IKEv2 VPN&#x27; -AuthenticationTransformConstants GCMAES128 -CipherTransformConstants GCMAES128 -EncryptionMethod AES256 -IntegrityCheckMethod SHA256 -PfsGroup None -DHGroup Group14 -PassThru -Force&quot;<br></code></pre></td></tr></table></figure></li><li><p>如果是手动创建的，则需要再配置下加密算法：<code>REG ADD HKLM\SYSTEM\CurrentControlSet\Services\RasMan\Parameters /v NegotiateDH2048_AES256 /t REG_DWORD /d 0x1 /f</code></p></li></ol><h4 id="OS-X-1"><a href="#OS-X-1" class="headerlink" title="OS X"></a>OS X</h4><p>直接将对应客户端的<code>.mobileconfig</code>文件传送至Mac，双击后按照提示导入描述文件，会自动配置一个VPN选项，然后连接即可，证书密码可通过导出对应客户端的配置信息查看</p><h4 id="iOS-1"><a href="#iOS-1" class="headerlink" title="iOS"></a>iOS</h4><p>与OS X一致</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/hwdsl2/docker-ipsec-vpn-server/blob/master/README-zh.md#%E9%85%8D%E7%BD%AE%E5%B9%B6%E4%BD%BF%E7%94%A8-ikev2-vpn">docker-ipsec-vpn-server</a></li><li><a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/ikev2-howto-zh.md">IKEv2 VPN 配置和使用指南</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/05/rsyslog-deploy/"/>
    <url>/2021/07/05/rsyslog-deploy/</url>
    
    <content type="html"><![CDATA[<h1 id="Rsyslog部署"><a href="#Rsyslog部署" class="headerlink" title="Rsyslog部署"></a>Rsyslog部署</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>syslog是类unix操作系统常用的日志处理程序</p><p>rsyslog是Ubuntu系统默认的日志程序，官方的介绍</p><blockquote><p>RSYSLOG is the <strong>r</strong>ocket-fast <strong>sys</strong>tem for <strong>log</strong> processing.</p></blockquote><p>总体来说，部署分为服务端和客户端两部分</p><h2 id="配置项含义"><a href="#配置项含义" class="headerlink" title="配置项含义"></a>配置项含义</h2><h3 id="SELECTOR"><a href="#SELECTOR" class="headerlink" title="SELECTOR"></a>SELECTOR</h3><p>local0.*是选择器（selector），指定该条配置对哪些日志生效。由类型（facility）和等级（priority）组成</p><p>类型包括</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">kern     内核信息，首先通过 klogd 传递；<br>user     用户进程；<br>mail     邮件；<br>daemon   后台进程；<br>authpriv 授权信息；<br>syslog   系统日志；<br>lpr      打印信息；<br>news     新闻组信息；<br>uucp     由uucp生成的信息<br>cron     计划和任务信息。<br>mark     syslog 内部功能用于生成时间戳<br>local0----local7   自定义程序使用，例如使用 local5 作为 ssh 功能<br>*        通配符代表除了 mark 以外的所有功能<br></code></pre></td></tr></table></figure><p>等级包括</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">emerg 或 panic   该系统不可用（最紧急消息）<br>alert            需要立即被修改的条件（紧急消息）<br>crit             阻止某些工具或子系统功能实现的错误条件（重要消息）<br>err              阻止工具或某些子系统部分功能实现的错误条件（出错消息）<br>warning          预警信息（警告消息）<br>notice           具有重要性的普通条件（普通但重要的消息）<br>info             提供信息的消息（通知性消息）<br>debug            不包含函数条件或问题的其他信息（调试级-信息量最多）<br>none             没有重要级，通常用于排错（不记录任何日志消息）<br>*                所有级别，除了none<br></code></pre></td></tr></table></figure><p>可以指定多个选择器，用逗号分隔</p><h3 id="ACTION"><a href="#ACTION" class="headerlink" title="ACTION"></a>ACTION</h3><p>紧跟着选择器的是动作（action），表示对所选的日志进行的操作，例如可以存到文件、发送到终端、发送到远程服务器。</p><p>此处action使用了rsyslog的高级配置，除了指定IP和端口之外，可以指定重传次数，队列长度</p><h2 id="客户端部署"><a href="#客户端部署" class="headerlink" title="客户端部署"></a>客户端部署</h2><h3 id="linux部署"><a href="#linux部署" class="headerlink" title="linux部署"></a>linux部署</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>目前大多数发行版默认使用rsyslog进行日志记录，未安装时一般使用包管理工具可直接安装<br><code>yum install rsyslog -y</code><br><code>apt install -y rsyslog</code></p><p>主配置文件的位置是/etc/rsyslog.conf，可以将用户配置置于/etc/rsyslog.d文件夹内。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>可以创建bga.conf用于传输日志到另一台服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">local0.*  action(type=&quot;omfwd&quot; target=&quot;192.168.1.120&quot; port=&quot;514&quot; protocol=&quot;tcp&quot;<br>                 action.resumeRetryCount=&quot;10&quot;<br>                 queue.type=&quot;linkedList&quot; queue.size=&quot;10000&quot;)<br><span class="hljs-meta">#</span><span class="bash"> local0.*为筛选器，格式为：<span class="hljs-string">&quot;日志类型.日志级别&quot;</span></span><br><span class="hljs-meta">#</span><span class="bash"> target为服务器的IP，protocol为采用的协议类型</span><br></code></pre></td></tr></table></figure><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><h3 id="Linux部署"><a href="#Linux部署" class="headerlink" title="Linux部署"></a>Linux部署</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>安装与服务器端安装一致即可</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p><code>edit /etc/rsyslog/rsyslog.conf</code>编辑配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">module(load=&quot;imtcp&quot;)  # 载入tcp模块，只能有一条<br>input(type=&quot;imtcp&quot; port=&quot;514&quot;)  # 启动监听端口，可以有多条，监听多个端口<br><br>local0.* /var/log/bga.log  # 将所有类型为local0的日志存储到/var/log/bga.log文件<br></code></pre></td></tr></table></figure><h3 id="Windows部署"><a href="#Windows部署" class="headerlink" title="Windows部署"></a>Windows部署</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>主流的软件包括KiwiSyslog和winsyslog等软件，其中kiwi有free trail，但现在获取需要2个工作日，很不方便</p><ol><li>下载文件<a href="https://onedrive.live.com/?authkey=!ABFrSuLKv_sDXO4&id=E4C9966B2424DB6F!1704&cid=E4C9966B2424DB6F">kiwisyslog-with-crack</a></li><li>下载完成后解压运行<code>Kiwi_Syslogd_8.3.7.setup.exe</code>进行安装</li><li>安装完成后进入<code>crack</code>目录，选择<code>Service</code>目录，打开managerc程序(exe文件)即完成服务的开启</li></ol><h4 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h4><ol><li>打开防火墙高级选项，添加入站规则，选择特定端口(端口设置为514或与服务器端口一致)，协议选择udp，并选择允许所有连接；重复上述步骤再添加一条tcp协议的入栈规则</li></ol><h4 id="syslog-server配置"><a href="#syslog-server配置" class="headerlink" title="syslog server配置"></a>syslog server配置</h4><ol><li>工具栏依次选择manage-&gt;Start the Syslogd service</li><li>工具栏依次选择File-&gt;Setup<ul><li>在Inputs中选择UDP设置UDP Port为514，Data encoding选择utf-8，Bind to address留空即可</li><li>选择TCP设置端口为514，编码同样选择utf-8</li></ul></li><li>依次点击apply-&gt;ok</li></ol><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>python官方库是自带syslog支持的，可以直接用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> syslog<br><br>syslog.openlog(ident=<span class="hljs-string">&#x27;BGA&#x27;</span>, logoption=syslog.LOG_PID, facility=syslog.LOG_LOCAL0)<br>syslog.syslog(<span class="hljs-string">&quot;This is a test message.&quot;</span>)<br><br><span class="hljs-comment"># facilities: LOG_KERN, LOG_USER, LOG_MAIL, LOG_DAEMON, LOG_AUTH, LOG_LPR, LOG_NEWS, LOG_UUCP, LOG_CRON, LOG_SYSLOG, LOG_LOCAL0 to LOG_LOCAL7, and, if defined in &lt;syslog.h&gt;, LOG_AUTHPRIV.</span><br><br><span class="hljs-comment"># logoptions: LOG_PID, LOG_CONS, LOG_NDELAY, and, if defined in &lt;syslog.h&gt;, LOG_ODELAY, LOG_NOWAIT, and LOG_PERROR.</span><br></code></pre></td></tr></table></figure><p>查看服务器的/var/log/bga.log文件，新增了一条日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Mar 21 15:22:23 bolean BGA[4295]: This is a test message.<br></code></pre></td></tr></table></figure><p>日志格式是timestamp hostname ident[pid]：log message</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/05/iot-intro/"/>
    <url>/2021/07/05/iot-intro/</url>
    
    <content type="html"><![CDATA[<h1 id="固件分析"><a href="#固件分析" class="headerlink" title="固件分析"></a>固件分析</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="物联网设备安全问题"><a href="#物联网设备安全问题" class="headerlink" title="物联网设备安全问题"></a>物联网设备安全问题</h3><p>物联网设备在研发过程中，往往存在如下问题：</p><ol><li>物联网设备在设计与开发时，因为网络环境特性不像传统服务器那样，更多关注功能实现而忽略安全性考虑，往往存在漏洞，并且缺乏后期安全检查</li><li>由于设备硬件资源限制，比如车机系统等，很难进行完整的安全防护策略实施，导致漏洞更容易被攻击者利用。而且这个问题由于物联网设备对移动性和体积的限制，基本上很难完全克服这个问题</li></ol><p>因为上述原因，对物联网设备的安全管理主要是通过设计时的安全考虑和开发中的安全检测来实现。而安全检测的方式与传统的软件漏挖技术也相对一致，主要分<strong>静态分析</strong>、<strong>动态模糊测试</strong>、*<em>同源性分析</em>：</p><ol><li>静态分析：对设备固件进行提取和解析，通过建立特定漏洞类型的分析规则(如检测脚本)，从而使用静态程序分析技术挖掘漏洞</li><li>动态分析：对真实设备或通过模拟固件运行实现的仿真系统进行相关的安全测试来发现漏洞(即运行状态下的检测)</li><li>同源性分析：由于软件开发中会应用到大量的第三方开源工具，因此也意味着第三方工具的漏洞往往也就是软件本身的漏洞，同源性分析就是将这些开源工具与软件关联起来进行分析</li></ol><h3 id="物联网设备漏挖的难点"><a href="#物联网设备漏挖的难点" class="headerlink" title="物联网设备漏挖的难点"></a>物联网设备漏挖的难点</h3><h4 id="通用漏挖技术"><a href="#通用漏挖技术" class="headerlink" title="通用漏挖技术"></a>通用漏挖技术</h4><p>通用漏挖技术一般分为基于源代码的漏挖和基于二进制的漏挖：</p><ol><li>基于源码：一般为静态分析的形式，建立特定检测规则，采用数据流分析、污点分析、符号执行等技术完成对应规则的验证，从而实现漏挖</li><li>基于二进制：二进制文件一般可执行，所以在静态基础上又可以进行动态和动静结合的策略；静态二进制分析一般先将二进制代码转换为汇编语言，或者进一步转换为某种统一的中间语言，之后再通过基于模式的漏洞分析或二进制代码比对实现静态漏挖；动态二进制方案则使用fuzz技术进行实施；动静结合一般用静态结果辅助动态测试</li></ol><h4 id="物联网漏挖的难点"><a href="#物联网漏挖的难点" class="headerlink" title="物联网漏挖的难点"></a>物联网漏挖的难点</h4><ol><li>硬件资源受限：通用二进制分析技术需要在运行程序的外部进行实时监控完成分析，而物联网设备存储资源，计算资源等往往受限，无法很好的部署相关的分析工具，动态分析也就往往难以实施</li><li>硬件架构各异：当前主流的架构arm、x86、mips等架构，在物联网设备中都时长出现，各家都可能有所不同，因此无法通过通用的CPU指令汇编的静态分析来实现物联网漏挖；而且一般物联网设备的IO设备也都复杂多样，进行动态分析时也很难适配</li><li>反开源特性：通用软件与功能，往往总能找到一些开源的代码或二进制文件进行分析，而物联网设备大多为高度集成的专用设备，一来固件很难提取，二来大部分厂商都会把固件当作严格保密的控制对象，只有极少数固件可以拿到源码进行分析。因此源码分析技术就很难适用于物联网设备的漏挖，同时高度集成也包含了软件层的高度定制，数据结构和架构也与通用软件有所区别，因此基于二进制的静态分析技术往往也难以施展</li></ol><h3 id="物联网漏挖的突破点"><a href="#物联网漏挖的突破点" class="headerlink" title="物联网漏挖的突破点"></a>物联网漏挖的突破点</h3><ol><li>平台交互频繁：物联网设备往往需要进行联网，与终端、云服务等进行频繁数据交互，通信行为和对象越多，同时也意味着可攻击的范围和路径更多，所以可以想办法利用信息交互的过程，对新的攻击面进行测试</li><li>组件代码的复用：由于物联网设备在研发中，一般不会对外开放源码，同时也为了节省研发成本，所以往往会使用大量的三方库，对应三方库的漏洞也就广泛存在于物联网设备中。因此基于二进制比对的静态分析技术就可以通过不同层次(控制流、程序块、指令集)的差异性来关联分析发现同源漏洞</li><li>漏洞类型的相对固定：通用软件中的漏洞一般包含内存破坏类(栈溢出、堆溢出、空指针应用、二次释放等)、输入验证类(命令注入等)、配置错误类等。漏洞的位置从低到高可能存在于内核、驱动、用户态程序中。固件系统本质上也是一个小系统，因此传统平台的检测方法也适用于与物联网设备的固件与程序</li></ol><h2 id="物联网漏挖技术-固件分析"><a href="#物联网漏挖技术-固件分析" class="headerlink" title="物联网漏挖技术 - 固件分析"></a>物联网漏挖技术 - 固件分析</h2><h3 id="技术要点-方向"><a href="#技术要点-方向" class="headerlink" title="技术要点/方向"></a>技术要点/方向</h3><p>简单的说，目前决定的调研方向主要分为三个方向，如图：<br><img src="../images/firmwareAnalysis.png" alt="firmwareAnalysis"></p><p>针对三个不同的方向上的关键节点，做了不同程度的调研</p><h4 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h4><p>固件提取使用binwalk，不做多余的描述，基本上和一期这部分一致；目前看到的各个工具中，提取/解压这个步骤基本都绕不开binwalk</p><h4 id="固件模拟运行"><a href="#固件模拟运行" class="headerlink" title="固件模拟运行"></a>固件模拟运行</h4><h5 id="firmadyne"><a href="#firmadyne" class="headerlink" title="firmadyne"></a>firmadyne</h5><p>Firmadyne是一款自动化和可裁剪的嵌入式Linux系统固件分析框架。它支持系统固件逆向QEMU嵌入式系统模拟执行。使用它模拟路由器固件执行路由器，然后可以基于模拟环境进行路由器漏洞挖掘、渗透攻防。</p><ol><li>运行逻辑：使用binwalk提取文件 -&gt; 检测是否存在文件系统 -&gt; 将提取出的系统打包成镜像 -&gt; 使用qemu运行固件</li><li>这个工具对路由器类的支持更好，官方说是有用来爬取主要厂商固件的爬虫，但是实际使用部署好以后数据库中没有其它的固件；目前从各个文献和文档看，应该是可以支持42个厂商的1W+固件</li><li>实际使用过程中，随便找的mips和arm架构的固件没运行成功，而且都是在初始化网卡的时候出的问题。查了很多文档尝试解决未果，最后看到个好像稍微靠谱的，但是很麻烦，需要改源码重新编译</li></ol><h4 id="静态文件检查"><a href="#静态文件检查" class="headerlink" title="静态文件检查"></a>静态文件检查</h4><h5 id="trommel"><a href="#trommel" class="headerlink" title="trommel"></a>trommel</h5><p>trommel可用于筛选嵌入式设备文件，以识别潜在的易受攻击的指标，支持一些检查：</p><ul><li>Secure Shell（SSH）密钥文件；</li><li>安全套接字层（SSL）密钥文件；</li><li>Internet协议（IP）地址；</li><li>统一资源定位器（URL）；</li><li>电子邮件地址；</li><li>shell 脚本；</li><li>Web 服务器二进制文件；</li><li>配置文件；</li><li>数据库文件；</li><li>特定的二进制文件（即 Dropbear，BusyBox 等）；</li><li>共享对象库文件；</li><li>Web 应用程序脚本变量；</li><li>Android 应用程序包（APK）文件权限</li></ul><p>使用深度不高，但是整体的表现像是做一些字符匹配，然后检查出关键内容什么状态，也很久没更新了，估计比较麻烦</p><h5 id="FACT-core"><a href="#FACT-core" class="headerlink" title="FACT_core"></a>FACT_core</h5><p><a href="https://fkie-cad.github.io/FACT_core/">FACT</a>全称Firmware Analysis and Comparison Tool，是一个拥有WEB端的自动化固件测试平台。设计宗旨是自动执行固件安全分析（路由器，物联网，UEFI，网络摄像头，无人驾驶飞机等等），平台使用Python-flask框架，采用模块化开发并支持插件接入，因此对于二次开发和优化应该相对算比较方便，目前在自己aliyun上搭建了一个<a href="http://47.240.100.196:5000/">FACT</a><br>FACT可以自动化完成固件解包任务并对其进行一定程度的固件分析：</p><ol><li>软件分析：包括使用的操作系统、存在哪些软件、使用了什么版本、有哪些伴随系统启动的服务、对应存在哪些漏洞</li><li>查找用户凭据</li><li>加密检测：私钥、证书、CPU架构</li><li>固件自动比对：将固件的新旧版本进行关联，可以识别已更改/相同的文件，识别更改的软件版本</li></ol><p>FACT_core主要的业务包括：unpacking、analysis与comparison，即解包、分析与比对；每一部分业务中具体又包含了任务调度器和插件集，每个调度器拥有的独立的线程(可以在system模块查看每个组件的线程池容量)</p><p>总的来说，FACT_core是目前调查过的工具里相对比较考虑的一个，其具有以下特征：</p><ol><li>内置的检查项多，web管理平台的执行逻辑其实和我们的固件分析很像，都是上传固件文件，然后勾选检查项(或使用默认策略)并进行对应的检查</li><li>个人感觉代码严谨，核心功能的工作流程设计很好，如果要二次开发的话会很方便</li><li>如果要运行的话很占内存，官方提供的最小要求也要4核心和8G内存，推荐的配置是16核64G（离谱）</li></ol><h4 id="同源性分析与相似度匹配"><a href="#同源性分析与相似度匹配" class="headerlink" title="同源性分析与相似度匹配"></a>同源性分析与相似度匹配</h4><p>这部分是实验室胡悦在做，主要针对<strong>可执行文件</strong>，采用的是相似度匹配的方式，最终表现为和库文件的相似度达到多少，然后再进一步验证漏洞，胡悦反映目前有个小demo，但是表现不尽人意；需要进一步评估可行性和确定给用户提供什么结果信息</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
